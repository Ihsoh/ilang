function _print_int8(str:*char, n:int8) {
	asm_set_reg "%eax", str;
	asm_set_reg "%bl", n;
	asm "movsbl %bl, %ebx\n";

	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $4, %esp\n";

	asm_set_reg "%eax", "%d\n";
	asm "pushl %ebx\n";
	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $8, %esp\n";
}

function _print_int16(str:*char, n:int16) {
	asm_set_reg "%eax", str;
	asm_set_reg "%bx", n;
	asm "movswl %bx, %ebx\n";

	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $4, %esp\n";

	asm_set_reg "%eax", "%d\n";
	asm "pushl %ebx\n";
	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $8, %esp\n";
}

function _print_int32(str:*char, n:int32) {
	asm_set_reg "%eax", str;
	asm_set_reg "%ebx", n;

	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $4, %esp\n";

	asm_set_reg "%eax", "%d\n";
	asm "pushl %ebx\n";
	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $8, %esp\n";
}

function _print_int64(str:*char, n:int64) {
	var n_l:uint32 = *cast<*uint32>(&n);
	var n_h:uint32 = *(cast<*uint32>(&n) + 1);

	asm_set_reg "%eax", str;
	asm_set_reg "%ebx", n_l;
	asm_set_reg "%ecx", n_h;

	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $4, %esp\n";

	asm_set_reg "%eax", "%lld\n";
	asm "pushl %ecx\n";
	asm "pushl %ebx\n";
	asm "pushl %eax\n";
	asm "calll printf\n";
	asm "addl $12, %esp\n";
}



