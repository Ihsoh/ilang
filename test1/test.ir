function _print_i64(n:int64) {
	asm_set_reg "%r8", n;

	asm "pushq %rbp\n";
	asm "movq %rsp, %rbp\n";
	asm "subq $16, %rsp\n";
	asm "andq $0xfffffffffffffff0, %rsp\n";
	asm_set_reg "%rdi", "%ld\n";
	asm "movq %r8, %rsi\n";
	asm "callq	_printf\n";
	asm "movq %rbp, %rsp\n";
	asm "popq %rbp\n";
}

function _add_i64(n1:int64, n2:int64):int64 {
	vcall _print_i64(n1);
	vcall _print_i64(n2);

	return cast<int64>(30);
}

function _main():int32 {

	var result:int64;

	call result, _add_i64(cast<int64>(10), cast<int64>(20));

	return cast<int32>(0);
}
