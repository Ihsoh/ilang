#include "test_inc.ir"

function _add_i64(n1:int64, n2:int64):int64 {
	vcall _print_int64("n1 = ", cast<int64>(100));
	vcall _print_int64("n2 = ", cast<int64>(200));

	var result:int64;
	add result, n1, n2;

	return result;
}

function _main():int32 {
	var result:int64;
	call result, _add_i64(cast<int64>(100), cast<int64>(200));

	vcall _print_int64("result = ", result);

	vcall _print_int8("test_int8 = ", cast<int8>(123));
	vcall _print_int16("test_int16 = ", cast<int16>(12345));
	vcall _print_int32("test_int32 = ", cast<int32>(123456789));
	vcall _print_int64("test_int64 = ", cast<int64>(1234567891012));

	vcall _print_int8("test_int8 = ", cast<int8>(-123));
	vcall _print_int16("test_int16 = ", cast<int16>(-12345));
	vcall _print_int32("test_int32 = ", cast<int32>(-123456789));
	vcall _print_int64("test_int64 = ", cast<int64>(-1234567891012));




	vcall _print_uint8("test_uint8 = ", cast<uint8>(234));
	vcall _print_uint16("test_uint16 = ", cast<uint16>(65535));
	vcall _print_uint32("test_uint32 = ", cast<uint32>(123456789));
	vcall _print_uint64("test_uint64 = ", cast<uint64>(1234567891012));

	vcall _print_float("test_float = ", cast<float>(123.456));
	vcall _print_double("test_double = ", cast<double>(123.456));

	vcall _print_pointer("test_pointer = ", cast<*>(0x12345678abcdef12));

	return cast<int32>(0);
}
